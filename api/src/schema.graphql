type User {
	userId: ID!
	name: String!
	RATED_rel: [RATED]
	rated: [Movie] @relation(name: "RATED", direction: "OUT")
}

type Person {
	bornIn: String
	tmdbId: Int
	imdbId: Int
	died: Date
	born: Date
	name: String!
	url: String
	poster: String
	bio: String
}

type Actor {
	bornIn: String
	tmdbId: Int
	imdbId: Int
	died: Date
	born: Date
	name: String!
	url: String
	poster: String
	bio: String
	acted_in: [Movie] @relation(name: "ACTED_IN", direction: "OUT")
}
type Director {
	bornIn: String
	tmdbId: Int
	imdbId: Int
	died: Date
	born: Date
	name: String!
	url: String
	poster: String
	bio: String
	directed: [Movie] @relation(name: "DIRECTED", direction: "OUT")
}

type Movie {
	languages: [String]
	year: Int
	imdbId: Int
	runtime: Int
	imdbRating: Float
	movieId: ID!
	countries: [String]
	imdbVotes: Int
	title: String
	url: String
	revenue: Int
	tmdbId: Int
	plot: String
	poster: String
	released: Date
	budget: Int
	users_rates: [User] @relation(name: "RATED", direction: "IN")
	RATED_rel: [RATED]
	in_genre: [Genre] @relation(name: "IN_GENRE", direction: "OUT")
}

type Genre {
	name: String!
}
type RATED @relation(name: "RATED") {
	from: User!
	to: Movie!
	rating: Float!
	timestamp: Int!
}
